
                 AVR を使用した（表示機構の無い）時計
                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

■ 概要

  これは、ATtiny2313を使用した、表示機構の無い最小限の時計です。

             Xtalには3.579545MHzを使用しています。
        (ソースを変更すれば、4MHz,8MHzなどに対応できます)


■ 動作説明

  タイマー割り込みを使用して 1/100秒 ごとに割り込みを起床しています。
  タイマー割り込みハンドラー内で、現在時刻を1/100秒単位で加算することで
  時刻を更新します。
  
  毎日、指定されたアラーム時刻になると、PB2を１秒間Hiにすることで、
  適当なアラームを鳴らしたり、ＰＣを起動したりすることができます。
  
  時刻合わせや、アラーム時刻の設定は、USART経由でＰＣなどから行ないます。
  ( ボーレートは9600bpsです )


■ USARTコマンド

>t
毎秒、時刻をUSARTに出力するかどうかを切り替えます。

>p
現在時刻をUSARTに出力します。

>s 23:59:59
現在時刻を設定します。

>a 07:00:00
アラーム時刻を設定します。

>w 3:
現在の曜日を設定します。 (0=Sun 1=Mon ... 6=Sat)

>j 10000
時計の進み方を微調整します。(j 10000のときは、 1/10000 だけ遅れるようにします)

Xtalには3.579545MHzを使用した場合、
	CPUクロックは	3,579,545/8 = 447443.125		 3.58MHz / 8 時の周期:
	1/100秒の割り込みTIMERの分周比＝4474.43125 となりますが、小数以下切捨てで、1/4474という
	分周になります。
	よって、0.000096390 だけ割り込み周期は速くなります。(約1万分の1、３時間に１秒程度)

	これを調整するため、割り込み回数にして1万回ごとに１回だけ、1/100秒の加算を省略するように
	しています。
	この間引きカウンタの天井値が j コマンドの指定値です。(デフォルト＝10000)


お約束
 - 秒は省略できます。
 - アラーム設定はリセット直後はOFFになっています。(アラーム時刻を 61秒 にしている)
 - アラーム禁止というコマンドはありませんので、hourを25にする、secを61にする等で代用します。

■ ビルド環境

-	コンパイラはavr-gcc 4.3.3 を使用しました。
-	4.x系のAVR-gccは、極力関数インライン展開することでパフォーマンスを得ています。
	が、tiny2313では、メモリーオーバーするので -finline-limit=1 オプションを与えて回避します。


■ 配線図

                  ATtiny2313
                  ___    ___
RESET            [1  |__| 20] Vcc
PD0(RxD)         [2       19] PB7(SCK)
PD1(TxD)         [3       18] PB6(MISO)
XTAL2            [4       17] PB5(MOSI)
XTAL1            [5       16] PB4                2SC1815 C
PD2              [6       15] PB3(BUSY LED)           |／~~~~~~~~POWER-SW
PD3              [7       14] PB2(POWER SW) -10kΩ----|
PD4              [8       13] PB1                     |＼E
PD5              [9       12] PB0                       |
GND              [10      11] PD6                       |
                  ~~~~~~~~~~~                          GND

   ---------------------------------------
   XTAL:    XTAL1,2 => Crystal 3.579545MHz
   PB3:     動作確認用LED ( LEDの片方は1kΩを経由して+5V)
   PB2:     電源制御用Tr  ( アラーム時刻に１秒 OnになるTr)
   PD0(RxD) USART --- USB経由などでPCに繋ぐ
   PD1(TxD) USART --- USB経由などでPCに繋ぐ
   RESET:   10kΩ程度で5V Pullupする.
   Vcc:     5V
   GND:     GND
   ---------------------------------------



■ FUSE設定

ヒューズの設定例は、以下のように設定します。

Low: 01101101 (0x6D)
     ||||++++-- CKSEL[3:0] システムクロック選択
     ||++-- SUT[1:0] 起動時間
     |+-- CKOUT (0:PD2にシステムクロックを出力)
     +-- CKDIV8 クロック分周初期値 (1:1/1, 0:1/8)

High:11-11111 (0xFF)
     |||||||+-- RSTDISBL (RESETピン 1:有効, 0:無効(PA2))
     ||||+++-- BODLEVEL[2:0] (111:Off, 110:1.8, 101:2.7, 100:4.3)
     |||+-- WDTON (WDT 0:常時ON, 1:通常)
     ||+-- SPIEN (1:ISP禁止, 0:ISP許可) ※Parallel時のみ
     |+-- EESAVE (消去でEEPROMを 1:消去, 0:保持)
     +-- DWEN (On-Chipデバッグ 1:無効, 0:有効)

Ext: -------1 (0xFF)
            +-- SPMEN (SPM命令 1:無効, 0:有効)



■ ソースファイルの説明.

main.c    : メイン処理.
timer.c   : タイマー１.
usart.c   : USART


■ Linux( ubuntu )からtty接続する方法.

Windowsでは、teratermなどで、シリアルポートを選択して9600bps接続します。

Linuxでは、minicomという端末ソフトをインストールして

 $ minicom -8 -b 9600 -o -D /dev/ttyACM0

のようにして接続します。
