SC1602 = 秋月16x2液晶.



                       キーボードマニア・ Part III
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~

■ テストルーチンの動作概要

  PS2 keyboard の文字入力に反応して、モールス符号を発生します。
  出力は、
    PORTD.6 にオーディオ帯域の発振音を出します。
    PORTD.7 にＣＷのMAKE信号(L=On)を出します。
  
  [ESC]が押されるとプログラムを終了します
  送信速度は、morse.c 内の MORSE_SPEED* の定義値を変更して再ビルドすると
　変更できます。

  [F1]を押すと、モールス／鍵盤のメインルーチンが入れ替わります。


■ ソースファイルの説明.

main.c    : メイン処理.
task.c    : 簡易タスク.
timer.c   : タイマー１.
reboot.c  : 再起動.
ps2keyb.c : PS2キーボード.
sound.c   : サウンド.
morse.c   : モールス打鍵アルゴリズム.
tonemain.c: 鍵盤メイン処理.


■ ヘッダファイルの説明.

config.h  : ポート設定関連の定義.
taskdef.h : 簡易タスクのアプリ側ID定義.

task.h    : 簡易タスク.
timer.h   : タイマー１.
ps2keyb.h : PS2キーボード.
keycode.h : SCAN CODE->ASCII CODE変換.
sinewave.h: sine波形テーブル
morse.h   : モールス打鍵.
morsetab.h: モールス符号表.
sound.h   : サウンド.
keyname.h : キーコード名称定義.
tonecode.h: 鍵盤テーブル.


■ taskの説明

taskは、単機能のスレッド管理です。以下の特徴があります。

	・スケジュールはラウンドロビンのみ。
	・ノン・プリエンプティブ。
	・あらかじめtask_idと、その実行関数を定義（自分でmapping）しておくこと。(taskdef.h)
	・割り込みルーチンとは基本的に無関係.(フォアグラウンド動作)。
	・タスク毎のコンテキストは、関数ポインタだけである。
	  ・レジスタコンテキストなどは一切持たない。
	  ・関数ポインタを自他により切り替える行為はＯＫ。
	  ・スタックエリアは全タスクに対して１個であり共有。
	・タスクをまわすためには dispatch_task() の実装部を呼び出す。
	・スリープ以外に、たいしたサービス処理は無い。
	・タスクキューやリスト構造を持たないので、あまり多い数のタスクをこなせない。
	  想定数＝せいぜい１６個以内。

レジスタコンテクストを持たないため、関数の途中で処理中断することが出来ません。
したがって、全てのタスク（登録関数）は、一定時間内に処理を終えてreturnする必要があります。

     ---＊---

メインルーチンは、現状では dispatch_task() を呼び出す無限ループの実装になっていますが
これを普通の複雑な手続きに変更して、I/O待ちあるいは各部のサブループにdispatch_task()
を埋め込むような構造にすれば、メインルーチンのみ、途中の待ち状態でも他のタスクを走行さ
せることが出来ると思います。（それ以外のタスクは、あいかわらず中断不可）

     ---＊---

タイマー割り込みによって、dispatch_task()を呼び出すような方法も考えられますが、他の
割り込み処理との競合問題や、フォアグラウンド側との競合関係を解決する必要があり、問題は
より複雑になります。
また、タイマー割り込みが長時間の割り込み禁止状態を引き起こすので、何らかの工夫が必要
になるかもしれません（クリティカル処理終了後は、割り込み許可状態にする等）


■ 積み残し／問題点

・PS2 keyboardのデータ取得方法が AVR313 AN のままなので、エラー処理等がありません.
・モールス打鍵速度調整、音量調整、音程調整等が未実装です.


